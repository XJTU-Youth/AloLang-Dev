declare type Options = {
    maxConcurrent?: number;
    retry?: boolean;
};
declare type ProcessCallback<TProcessArgs extends any[]> = (job: string, ...args: TProcessArgs) => void | Promise<void>;
declare class PromiseQueue<TProcessArgs extends any[]> {
    process: ProcessCallback<TProcessArgs>;
    maxConcurrent: number;
    retry: boolean;
    queue: Array<[string, TProcessArgs]>;
    processing: Set<string>;
    processed: Set<string>;
    numRunning: number;
    runPromise: Promise<Set<string>> | null;
    resolve: ((processed: Set<string>) => void) | null;
    reject: ((error: Error) => void) | null;
    constructor(callback: ProcessCallback<TProcessArgs>, options?: Options);
    add(job: string, ...args: TProcessArgs): void;
    run(): Promise<Set<string>>;
    private _runJob;
    private _next;
    private _reset;
}

export { Options, ProcessCallback, PromiseQueue };

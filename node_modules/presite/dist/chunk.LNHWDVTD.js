"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/Crawler.ts
var _taki = require('taki');
var _chalk = require('chalk'); var _chalk2 = _interopRequireDefault(_chalk);
var _promisequeue = require('@egoist/promise-queue');
var SPECIAL_EXTENSIONS_RE = /\.(xml|json)$/;
var routeToFile = (route) => {
  if (/\.html$/.test(route) || SPECIAL_EXTENSIONS_RE.test(route)) {
    return route;
  }
  return route.replace(/\/?$/, "/index.html");
};
var Crawler = class {
  constructor(opts) {
    this.opts = opts;
  }
  async crawl() {
    const {hostname, port, options, writer, logger} = this.opts;
    const routes = typeof options.routes === "function" ? await options.routes() : options.routes;
    const crawlRoute = async (routes2) => {
      const queue = new (0, _promisequeue.PromiseQueue)(async (route) => {
        const file = routeToFile(route);
        let links;
        const html = await _taki.request.call(void 0, {
          url: `http://${hostname}:${port}${route}`,
          onBeforeRequest(url) {
            logger.log(`Crawling contents from ${_chalk2.default.cyan(url)}`);
          },
          async onBeforeClosingPage(page) {
            links = new Set(await page.evaluate(({hostname: hostname2, port: port2}) => {
              return Array.from(document.querySelectorAll("a")).filter((a) => {
                return a.hostname === hostname2 && a.port === port2;
              }).map((a) => a.pathname);
            }, {hostname, port: String(port)}));
          },
          manually: SPECIAL_EXTENSIONS_RE.test(route) ? true : options.manually,
          async onCreatedPage(page) {
            if (options.onBrowserPage) {
              await options.onBrowserPage(page);
            }
            page.on("console", (e) => {
              const type = e.type();
              const log = console[type] || console.log;
              const location = e.location();
              log(`Message from ${location.url}:${location.lineNumber}:${location.columnNumber}`, e.text());
            });
          }
        });
        if (links && links.size > 0) {
          for (const link of links) {
            queue.add(link);
          }
        }
        logger.log(`Writing ${_chalk2.default.cyan(file)} for ${_chalk2.default.cyan(route)}`);
        await writer.write({html, file});
      }, {maxConcurrent: 50});
      for (const route of routes2) {
        queue.add(route);
      }
      await queue.run();
    };
    await crawlRoute(routes);
    await _taki.cleanup.call(void 0, );
  }
};




exports.SPECIAL_EXTENSIONS_RE = SPECIAL_EXTENSIONS_RE; exports.Crawler = Crawler;

%import unsafe.alo

class array<A>
{
    UnsafePointer<A> ptr;
    int sz;                 // current size
    int cap;                // current capacity
    func _Desired_size_to_capacity(int _size) -> int
    {
        // return (int(_size / 16) + 1) * 16;
        // return (_size >> 4) + 1 << 4;
        return _size;
    }
    func init(int _sz)
    {
        this->sz = _sz;
        this->cap = this->_Desired_size_to_capacity(_sz);
        this->ptr.malloc(this->cap);
        return;
    }
    func destroy()
    {
        this->ptr.free();
        this->sz = 0;
        this->cap = 0;
        return;
    }
    func size() -> int
    {
        return this->sz;
    }
    func capacity() -> int
    {
        return this->cap;
    }
    func data() -> A*
    {
        return this->ptr.load();
    }
    func _Reallocate(int _Newsz)
    {
        this->cap = this->_Desired_size_to_capacity(_Newsz);
        UnsafePointer<A> newptr;
        newptr.malloc(this->cap);
        memcpy(this->ptr.addr, newptr.addr, this->sz * sizeof(A));
        this->ptr.free();
        this->ptr = newptr;
        return;
    }
    func concat(A* _ptr, int _sz)
    {
        int newsz = this->sz + _sz;
        if(newsz > this->cap) this->_Reallocate(newsz);
        memcpy(_ptr, this->ptr.addr + this->sz * sizeof(A), _sz * sizeof(A));
        this->sz = newsz;
        return;
    }
    func append(A obj)
    {
        this->concat(&obj, 1);
        return;
    }
}
%{
#include <Token.h>
#include <fstream>
#include <iostream>
int token;

%}
%option yylineno
%option c++

%%
[ \t\n]+                                {/*Skip spaces tabs, and line feeds*/};

\"(([^\"\n]|\\\"|\\\n)*[^\\])?\"        token = tok_str;            return token;
\"(([^\"\n]|\\\"|\\\n)*[^\\])?[^\"]\n   token = tok_err;            return token;

and|or|xor|not                          token = tok_key_op;         return token;

true|false                              token = tok_key_literal;    return token;

break                                   token = tok_key_break;      return token;
continue                                token = tok_key_continue;   return token;
do                                      token = tok_key_do;         return token;
else                                    token = tok_key_else;       return token;
for                                     token = tok_key_for;        return token;
foreach                                 token = tok_key_foreach;    return token;
goto                                    token = tok_key_goto;       return token;
if                                      token = tok_key_if;         return token;
while                                   token = tok_key_while;      return token;
sizeof                                  token = tok_key_sizeof;     return token;

case|switch                             token = tok_key_switch;     return token;

class                                   token = tok_key_class;      return token;

fun                                     token = tok_fun;            return token;
func                                    token = tok_fun;            return token;
extern                                  token = tok_extern;         return token;
return                                  token = tok_return;         return token;
[a-zA-Z_][a-zA-Z_0-9]*                  token = tok_identifier;     return token;
0\.[0-9]+                               token = tok_number;         return token;
0b[01]+                                 token = tok_number;         return token;
0x[1-9a-fA-F][0-9a-fA-F]*               token = tok_number;         return token;
0B[01]+                                 token = tok_number;         return token;
0X[1-9a-fA-F][0-9a-fA-F]*               token = tok_number;         return token;
0[1-7][0-7]*                            token = tok_number;         return token;
[1-9][0-9.]*                            token = tok_number;         return token;
0                                       token = tok_number;         return token;

->                                      token = tok_syntax;         return token;
>>                                      token = tok_syntax;         return token;
<<                                      token = tok_syntax;         return token;
==                                      token = tok_syntax;         return token;
!=                                      token = tok_syntax;         return token;
\>=                                     token = tok_syntax;         return token;
\<=                                     token = tok_syntax;         return token;
!                                       token = tok_syntax;         return token;
%                                       token = tok_syntax;         return token;
\^                                      token = tok_syntax;         return token;
&                                       token = tok_syntax;         return token;
\*                                      token = tok_syntax;         return token;
\(                                      token = tok_syntax;         return token;
\)                                      token = tok_syntax;         return token;
\+                                      token = tok_syntax;         return token;
-                                       token = tok_syntax;         return token;
=                                       token = tok_syntax;         return token;
\{                                      token = tok_syntax;         return token;
\}                                      token = tok_syntax;         return token;
\|                                      token = tok_syntax;         return token;
~                                       token = tok_syntax;         return token;
\[                                      token = tok_syntax;         return token;
\]                                      token = tok_syntax;         return token;
\\                                      token = tok_syntax;         return token;
;                                       token = tok_syntax;         return token;
'                                       token = tok_syntax;         return token;
:                                       token = tok_syntax;         return token;
\"                                      token = tok_syntax;         return token;
,                                       token = tok_syntax;         return token;
\<                                      token = tok_syntax;         return token;
\>                                      token = tok_syntax;         return token;
\?                                      token = tok_syntax;         return token;
\.                                      token = tok_syntax;         return token;
\/                                      token = tok_syntax;         return token;
#                                       token = tok_syntax;         return token;
<<EOF>>                                 {token = tok_eof;           return token;}
<*>.|\n                                 token = tok_err;            return token;
%%

int yyFlexLexer::yywrap(){return 1;}
